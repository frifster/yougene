{
  "info": {
    "name": "YouGene API",
    "description": "API collection for YouGene backend",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        },
        "description": "Check if the API is running"
      }
    },
    {
      "name": "Authentication",
      "description": "Authentication endpoints for user management\n\nRequired Headers:\n- Content-Type: application/json\n\nEnvironment Variables:\n- {{token}}: JWT token received after login (automatically set)\n\nFlow:\n1. Register a new user\n2. Login with credentials (automatically saves token)\n3. Use the received token for authenticated requests\n4. Logout to invalidate the token",
      "item": [
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            },
            "description": "Register a new user\n\nRequest Body:\n- username: string (min 3 chars)\n- email: valid email address\n- password: string (min 6 chars)\n\nResponse:\n- 201: User created successfully\n- 400: Invalid input or user exists"
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Check if the response is successful",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Parse the response body",
                  "const response = pm.response.json();",
                  "",
                  "// Check if the response has a token",
                  "pm.test('Response has token', function () {",
                  "    pm.expect(response).to.have.property('token');",
                  "});",
                  "",
                  "// Save the token to collection variable",
                  "if (response.token) {",
                  "    pm.collectionVariables.set('token', response.token);",
                  "    console.log('Token saved to collection variable');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Login with email and password\n\nRequest Body:\n- email: registered email address\n- password: user's password\n\nResponse:\n- 200: Login successful (includes JWT token)\n- 401: Invalid credentials\n\nAutomatically saves the token to {{token}} collection variable"
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "logout"]
            },
            "description": "Logout and invalidate the current token\n\nRequired Headers:\n- Authorization: Bearer token\n\nResponse:\n- 200: Logout successful\n- 401: Not authenticated"
          }
        }
      ]
    },
    {
      "name": "Monsters",
      "description": "Monster management endpoints\n\nRequired Headers:\n- Content-Type: application/json\n\nFeatures:\n- Create, read, update, and delete monsters\n- Basic monster attributes management",
      "item": [
        {
          "name": "Get All Monsters",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/monsters",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "monsters"]
            },
            "description": "Get all monsters\n\nResponse:\n- 200: List of monsters\n- 500: Server error"
          }
        },
        {
          "name": "Create Monster",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Dragon\",\n    \"level\": 10,\n    \"hp\": 100,\n    \"attack\": 15,\n    \"defense\": 8,\n    \"description\": \"A fearsome dragon\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/monsters",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "monsters"]
            },
            "description": "Create a new monster\n\nRequest Body:\n- name: Monster name (string)\n- level: Monster level (number, min: 1)\n- hp: Hit points (number, min: 1)\n- attack: Attack power (number, min: 0)\n- defense: Defense power (number, min: 0)\n- description: Monster description (string)\n\nResponse:\n- 201: Monster created\n- 400: Invalid input"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Check if the response is successful",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Parse the response body",
                  "const response = pm.response.json();",
                  "",
                  "// Check if the response has monster data",
                  "pm.test('Response has monster data', function () {",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('level');",
                  "    pm.expect(response).to.have.property('hp');",
                  "    pm.expect(response).to.have.property('attack');",
                  "    pm.expect(response).to.have.property('defense');",
                  "    pm.expect(response).to.have.property('description');",
                  "});",
                  "",
                  "// Save the monster ID to collection variable",
                  "if (response.id) {",
                  "    const lastCreatedMonsterId = pm.collectionVariables.get('lastCreatedMonsterId');",
                  "    if (lastCreatedMonsterId) {",
                  "        // If we already have a monster ID, save this one as secondMonsterId",
                  "        pm.collectionVariables.set('secondMonsterId', response.id);",
                  "        console.log('Second monster ID saved to collection variable');",
                  "    } else {",
                  "        // If this is the first monster, save it as lastCreatedMonsterId",
                  "        pm.collectionVariables.set('lastCreatedMonsterId', response.id);",
                  "        console.log('First monster ID saved to collection variable');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Second Monster",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Phoenix\",\n    \"level\": 12,\n    \"hp\": 120,\n    \"attack\": 18,\n    \"defense\": 10,\n    \"description\": \"A majestic phoenix\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/monsters",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "monsters"]
            },
            "description": "Create a second monster for battle\n\nRequest Body:\n- name: Monster name (string)\n- level: Monster level (number, min: 1)\n- hp: Hit points (number, min: 1)\n- attack: Attack power (number, min: 0)\n- defense: Defense power (number, min: 0)\n- description: Monster description (string)\n\nResponse:\n- 201: Monster created\n- 400: Invalid input"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Check if the response is successful",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Parse the response body",
                  "const response = pm.response.json();",
                  "",
                  "// Check if the response has monster data",
                  "pm.test('Response has monster data', function () {",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('level');",
                  "    pm.expect(response).to.have.property('hp');",
                  "    pm.expect(response).to.have.property('attack');",
                  "    pm.expect(response).to.have.property('defense');",
                  "    pm.expect(response).to.have.property('description');",
                  "});",
                  "",
                  "// Save the monster ID to collection variable",
                  "if (response.id) {",
                  "    pm.collectionVariables.set('secondMonsterId', response.id);",
                  "    console.log('Second monster ID saved to collection variable');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Monster by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/monsters/{{lastCreatedMonsterId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "monsters", "{{lastCreatedMonsterId}}"]
            },
            "description": "Get a specific monster by ID\n\nURL Parameters:\n- id: Monster ID\n\nResponse:\n- 200: Monster details\n- 404: Monster not found\n- 500: Server error"
          }
        },
        {
          "name": "Update Monster",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"hp\": 120,\n    \"attack\": 18\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/monsters/{{lastCreatedMonsterId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "monsters", "{{lastCreatedMonsterId}}"]
            },
            "description": "Update a monster's attributes\n\nURL Parameters:\n- id: Monster ID\n\nRequest Body:\n- name: Monster name (string, optional)\n- level: Monster level (number, min: 1, optional)\n- hp: Hit points (number, min: 1, optional)\n- attack: Attack power (number, min: 0, optional)\n- defense: Defense power (number, min: 0, optional)\n- description: Monster description (string, optional)\n\nResponse:\n- 200: Monster updated\n- 404: Monster not found\n- 400: Invalid input"
          }
        },
        {
          "name": "Delete Monster",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/monsters/{{lastCreatedMonsterId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "monsters", "{{lastCreatedMonsterId}}"]
            },
            "description": "Delete a monster\n\nURL Parameters:\n- id: Monster ID\n\nResponse:\n- 200: Monster deleted successfully\n- 404: Monster not found\n- 500: Server error"
          }
        }
      ]
    },
    {
      "name": "Battles",
      "description": "Battle system endpoints\n\nRequired Headers:\n- Content-Type: application/json\n\nFeatures:\n- Create and manage battles between characters\n- Turn-based combat system\n- Battle state tracking and logging",
      "item": [
        {
          "name": "Create Battle",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"player1\": {\n        \"id\": \"{{lastCreatedMonsterId}}\",\n        \"name\": \"Player 1\",\n        \"health\": 100,\n        \"maxHealth\": 100,\n        \"attack\": 20,\n        \"defense\": 10,\n        \"speed\": 15\n    },\n    \"player2\": {\n        \"id\": \"{{secondMonsterId}}\",\n        \"name\": \"Player 2\",\n        \"health\": 100,\n        \"maxHealth\": 100,\n        \"attack\": 18,\n        \"defense\": 12,\n        \"speed\": 12\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/battles",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "battles"]
            },
            "description": "Create a new battle between two characters\n\nRequest Body:\n- player1: Character object (id, name, health, maxHealth, attack, defense, speed)\n- player2: Character object (id, name, health, maxHealth, attack, defense, speed)\n\nResponse:\n- 201: Battle created successfully\n- 400: Invalid input"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Check if the response is successful",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Parse the response body",
                  "const response = pm.response.json();",
                  "",
                  "// Check if the response has battle data",
                  "pm.test('Response has battle data', function () {",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('player1');",
                  "    pm.expect(response).to.have.property('player2');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('createdAt');",
                  "});",
                  "",
                  "// Save the battle ID to collection variable",
                  "if (response.id) {",
                  "    pm.collectionVariables.set('lastCreatedBattleId', response.id);",
                  "    console.log('Battle ID saved to collection variable');",
                  "}",
                  "",
                  "// Initialize attacker and defender variables",
                  "if (response.player1 && response.player2) {",
                  "    pm.collectionVariables.set('currentAttackerId', response.player1.id);",
                  "    pm.collectionVariables.set('currentDefenderId', response.player2.id);",
                  "    console.log('Attacker and defender initialized');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Start Battle",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/battles/{{lastCreatedBattleId}}/start",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "battles", "{{lastCreatedBattleId}}", "start"]
            },
            "description": "Start a battle\n\nURL Parameters:\n- battleId: ID of the battle to start\n\nResponse:\n- 200: Battle started successfully\n- 400: Invalid battle ID or battle already started\n- 404: Battle not found"
          }
        },
        {
          "name": "Execute Turn",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"attackerId\": \"{{currentAttackerId}}\",\n    \"defenderId\": \"{{currentDefenderId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/battles/{{lastCreatedBattleId}}/turn",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "battles", "{{lastCreatedBattleId}}", "turn"]
            },
            "description": "Execute a turn in the battle\n\nURL Parameters:\n- battleId: ID of the battle\n\nRequest Body:\n- attackerId: ID of the attacking character\n- defenderId: ID of the defending character\n\nResponse:\n- 200: Turn executed successfully\n- 400: Invalid battle state or character IDs\n- 404: Battle not found"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Check if the response is successful",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Parse the response body",
                  "const response = pm.response.json();",
                  "",
                  "// Check if the response has battle data",
                  "pm.test('Response has battle data', function () {",
                  "    pm.expect(response).to.have.property('player1');",
                  "    pm.expect(response).to.have.property('player2');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('currentTurn');",
                  "});",
                  "",
                  "// Swap attacker and defender for next turn",
                  "const currentAttacker = pm.collectionVariables.get('currentAttackerId');",
                  "const currentDefender = pm.collectionVariables.get('currentDefenderId');",
                  "pm.collectionVariables.set('currentAttackerId', currentDefender);",
                  "pm.collectionVariables.set('currentDefenderId', currentAttacker);",
                  "console.log('Turn swapped for next request');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Battle Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/battles/{{lastCreatedBattleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "battles", "{{lastCreatedBattleId}}"]
            },
            "description": "Get the current status of a battle\n\nURL Parameters:\n- battleId: ID of the battle\n\nResponse:\n- 200: Current battle state\n- 404: Battle not found"
          }
        },
        {
          "name": "Get Battle Log",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/battles/{{lastCreatedBattleId}}/log",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "battles", "{{lastCreatedBattleId}}", "log"]
            },
            "description": "Get the battle log with all actions\n\nURL Parameters:\n- battleId: ID of the battle\n\nResponse:\n- 200: Battle log with all actions\n- 404: Battle not found"
          }
        }
      ]
    },
    {
      "name": "Breeding",
      "description": "Monster breeding system endpoints\n\nRequired Headers:\n- Content-Type: application/json\n- Authorization: Bearer {{token}}\n\nFeatures:\n- Breed two monsters together\n- Create offspring with inherited traits",
      "item": [
        {
          "name": "Breed Monsters",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"parent1Id\": \"monster1_id\",\n    \"parent2Id\": \"monster2_id\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/breeding/breed",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "breeding", "breed"]
            },
            "description": "Breed two monsters together\n\nRequest Body:\n- parent1Id: ID of the first parent monster\n- parent2Id: ID of the second parent monster\n\nResponse:\n- 201: Offspring created successfully\n- 400: Invalid input\n- 404: One or both parent monsters not found\n- 401: Unauthorized (missing or invalid token)\n\nExample Test Script:\n```javascript\n// Get two monster IDs from environment variables\nconst parent1Id = pm.environment.get('monster1_id');\nconst parent2Id = pm.environment.get('monster2_id');\n\n// Set the request body\npm.request.body.raw = JSON.stringify({\n    parent1Id: parent1Id,\n    parent2Id: parent2Id\n});\n\n// Test the response\npm.test('Status code is 201', function () {\n    pm.response.to.have.status(201);\n});\n\npm.test('Response has monster data', function () {\n    const response = pm.response.json();\n    pm.expect(response.data).to.have.property('monster');\n    pm.expect(response.data.monster).to.have.property('name');\n    pm.expect(response.data.monster).to.have.property('parent1');\n    pm.expect(response.data.monster).to.have.property('parent2');\n    pm.expect(response.data.monster).to.have.property('generation');\n});\n```"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
} 